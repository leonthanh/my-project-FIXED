name: Deploy to cPanel
on:
  push:
    branches: [ main ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      frontend-hash: ${{ steps.hash.outputs.frontend }}
      backend-hash: ${{ steps.hash.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - id: hash
        run: |
          echo "frontend=$(find frontend -type f -exec md5sum {} \; | sort | md5sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "backend=$(find backend -type f -exec md5sum {} \; | sort | md5sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install & Build Frontend
        run: |
          cd frontend
          echo "REACT_APP_API_URL=https://ix.star-siec.edu.vn/api/" > .env
          echo "NODE_ENV=production" >> .env
          npm ci --prefer-offline --no-audit --no-progress || exit 1
          npm run build --no-progress || exit 1
        env:
          CI: false
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Deploy Frontend
        run: |
          echo "Loading deploy functions..."
          source .github/workflows/deploy-functions.sh
          
          echo "Starting frontend deployment..."
          deploy_with_retry "frontend/build" "/ix.star-siec.edu.vn/frontend/build" || exit 1
          echo "Frontend deployment completed"

  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Create Backend Package
        run: |
          # Copy essential backend files
          mkdir -p backend-temp
          cp backend/{server.js,db.js} backend-temp/
          cp -r backend/{routes,models,uploads} backend-temp/
          
          # Copy package files for proper dependency installation
          cp backend/package.json backend-temp/
          cp backend/package-lock.json backend-temp/ || true
          
          # Create env file
          echo "NODE_ENV=production" > backend-temp/.env
          echo "PORT=3000" >> backend-temp/.env
          echo "DB_HOST=localhost" >> backend-temp/.env
          echo "DB_NAME=wsxcblqh_ix" >> backend-temp/.env
          echo "DB_USER=wsxcblqh_thanh" >> backend-temp/.env
          echo "DB_PASS=@Thanh562184" >> backend-temp/.env
          
          # Install dependencies
          cd backend-temp
          if [ -f "package-lock.json" ]; then
            echo "Installing dependencies with npm ci..."
            npm ci --prefer-offline --no-audit --no-progress --production
          else
            echo "No package-lock.json found, using npm install..."
            npm install --prefer-offline --no-audit --no-progress --production
          fi

      - name: Deploy Backend
        run: |
          echo "Loading deploy functions..."
          source .github/workflows/deploy-functions.sh
          
          echo "Starting backend deployment..."
          deploy_with_retry "backend-temp" "/ix.star-siec.edu.vn/backend" || exit 1
          echo "Backend deployment completed"

      - name: Restart Server
        run: |
          echo "<?php
          \$output = '';
          try {
              // Install dependencies
              \$install = shell_exec('cd /home/wsxcblqh/ix.star-siec.edu.vn/backend && /usr/local/bin/npm ci --production 2>&1');
              \$output .= \"Install: \$install\\n\";
              
              // Stop PM2
              \$stop = shell_exec('/usr/local/bin/pm2 delete server 2>/dev/null || true');
              \$output .= \"Stop: \$stop\\n\";
              
              // Start PM2
              \$start = shell_exec('cd /home/wsxcblqh/ix.star-siec.edu.vn/backend && NODE_ENV=production /usr/local/bin/pm2 start server.js --name \"server\" 2>&1');
              \$output .= \"Start: \$start\\n\";
              
              // Check status
              \$status = shell_exec('/usr/local/bin/pm2 list');
              if (strpos(\$status, 'online') === false) {
                  throw new Exception('Server failed to start');
              }
              \$output .= \"Status: \$status\";
              
          } catch (Exception \$e) {
              http_response_code(500);
              echo \"<pre>Error: \" . \$e->getMessage() . \"\\n\$output</pre>\";
              exit(1);
          }
          echo \"<pre>\$output</pre>\";
          ?>" > restart.php
          
          # Upload and execute with retry
          max_retries=3
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            if curl -s -T restart.php -u "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" "ftp://star-siec.edu.vn/ix.star-siec.edu.vn/"; then
              response=$(curl -s "https://ix.star-siec.edu.vn/restart.php")
              if [[ $response != *"Error"* ]] && [[ $response != *"failed"* ]]; then
                echo "Server restarted successfully"
                rm restart.php
                exit 0
              fi
            fi
            retry_count=$((retry_count+1))
            [ $retry_count -lt $max_retries ] && echo "Retry $retry_count..." && sleep 5
          done
          echo "Failed to restart server after $max_retries attempts"
          exit 1