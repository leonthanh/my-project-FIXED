# AI Agent Instructions for Writing Test Platform

## Project Overview
This is a writing and listening test platform built with React (frontend) and Express.js (backend). It enables students to take timed writing and listening tests while teachers can review submissions.

## Architecture

### Frontend (`/frontend`)
- React 18 SPA using React Router v6
- Key components:
  - `WritingTest.jsx`: Main test interface with split-screen layout (adaptive)
  - `ListeningTest.jsx`: Audio-based test interface
  - Student/Teacher interfaces with role-based routing
- Environment config in `.env` with `REACT_APP_API_URL` for production
- Uses `react-quill` for rich text editing and `react-split` for layouts

### Backend (`/backend`)
- Express.js server with structured routes:
  - `/api/auth`: Authentication (JWT-based)
  - `/api/writing-tests`, `/api/listening-tests`: Test management 
  - `/api/writing`: Submission handling with file uploads
  - `/api/ai`: AI integration routes
- MySQL database using Sequelize ORM
- Production deployment via PM2

## Key Patterns & Conventions

### State Management
- Local storage for test state:
  ```javascript
  writing_task1, writing_task2  // Current answers
  writing_timeLeft             // Remaining time
  writing_started             // Test start timestamp
  user                       // Session data
  ```

### Environment Configuration
- Development vs Production settings in `db.js`:
  ```javascript
  isProd ? process.env.PROD_DB_NAME : process.env.DB_NAME
  isProd ? process.env.PROD_DB_USER : process.env.DB_USER
  ```

### Deployment Pattern
- GitHub Actions workflow (`deploy.yml`):
  1. Builds frontend with production API URL
  2. Smart FTP deployment - only changed files
  3. Minimal backend package with production dependencies
  4. PM2 process management for zero-downtime updates

## Development Workflow

### Local Setup
```bash
# Backend
cd backend
npm install
# Set up .env with DB_HOST, DB_NAME, DB_USER, DB_PASS
npm start  # Runs on port 5000

# Frontend
cd frontend
npm install
# Create .env with REACT_APP_API_URL=http://localhost:5000/api
npm start  # Runs on port 3000
```

### Database Management
- Models in `backend/models/` define schema
- Auto-sync enabled in `server.js`:
  ```javascript
  sequelize.sync({ alter: true })
  ```
- Production DB credentials in cPanel MySQL

## Integration Points

### File Upload Flow
1. Multer handles uploads to `/backend/uploads/`
2. Files served statically via `/uploads` route
3. Frontend constructs full URLs using `REACT_APP_API_URL`

### Authentication System
- JWT tokens stored in localStorage
- Role-based routes check `user.role` on frontend
- Protected API routes use auth middleware

## Troubleshooting
- Deployment issues: Check PM2 logs via cPanel terminal
- Database sync issues: Compare model changes with production schema
- Build failing: Ensure Node 16.x compatibility