const { DataTypes } = require('sequelize');
const sequelize = require('../db');
const bcrypt = require('bcryptjs'); // Import th∆∞ vi·ªán bcryptjs

const User = sequelize.define('User', {
  id: {
    type: DataTypes.INTEGER,
    autoIncrement: true,
    primaryKey: true, // üëà B·∫Øt bu·ªôc ƒë·ªÉ li√™n k·∫øt foreign key
  },
  name: {
    type: DataTypes.STRING(100),
    allowNull: false,
  },
  phone: {
    type: DataTypes.STRING(20),
    unique: true,
    allowNull: false,
  },
  password: { // ‚úÖ Tr∆∞·ªùng password
    type: DataTypes.STRING,
    allowNull: false,
  },
  role: {
    type: DataTypes.ENUM('student', 'teacher', 'admin'),
    defaultValue: 'student',
  }
}, {
  tableName: 'users',
  timestamps: true,
});

// ‚úÖ Hook: T·ª± ƒë·ªông m√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi t·∫°o user m·ªõi
User.beforeCreate(async (user, options) => {
  if (user.password) {
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(user.password, salt);
    user.password = hashedPassword;
  }
});

// ‚úÖ Hook: M√£ h√≥a m·∫≠t kh·∫©u khi c·∫≠p nh·∫≠t (n·∫øu c√≥ thay ƒë·ªïi)
User.beforeUpdate(async (user, options) => {
  if (user.changed('password')) {
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(user.password, salt);
    user.password = hashedPassword;
  }
});

// ‚úÖ Ph∆∞∆°ng th·ª©c so s√°nh m·∫≠t kh·∫©u
User.prototype.comparePassword = async function(candidatePassword) {
  return await bcrypt.compare(candidatePassword, this.password);
};

module.exports = User;
