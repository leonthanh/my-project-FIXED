import React, { useState, useRef } from 'react';
import AdminNavbar from '../components/AdminNavbar';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import DecoupledEditor from '@ckeditor/ckeditor5-build-decoupled-document';
import PreviewSection from '../components/PreviewSection';
import ListeningPart from '../components/ListeningPart';

const CreateListeningTest = () => {
  const [audioFile, setAudioFile] = useState(null);
  const [partTypes, setPartTypes] = useState({
    part1: 'fill',
    part2: 'radio',
    part3: 'mixed',
    part4: 'radio'
  });

  const [partInstructions, setPartInstructions] = useState({
    part1: '',
    part2: '',
    part3: '',
    part4: ''
  });

  const [questions, setQuestions] = useState({
    part1: Array(10).fill().map(() => ({
      questionType: 'fill',
      questionText: '',
      correctAnswer: ''
    })),
    part2: Array(10).fill().map(() => ({
      questionType: 'radio',
      questionText: '',
      options: ['', '', ''],
      correctAnswer: ''
    })),
    part3: Array(10).fill().map(() => ({
      questionType: 'mixed',
      questionText: '',
      options: ['', '', '', '', ''],
      correctAnswer: ''
    })),
    part4: Array(10).fill().map(() => ({
      questionType: 'radio',
      questionText: '',
      options: ['', '', '', ''],
      correctAnswer: ''
    }))
  });

  const [classCode, setClassCode] = useState('');
  const [teacherName, setTeacherName] = useState('');
  const [message, setMessage] = useState('');
  const [showPreview, setShowPreview] = useState(false);
  const [activeSection, setActiveSection] = useState('instructions');
  const [instructions, setInstructions] = useState('');
  const [partAudioFiles, setPartAudioFiles] = useState({
    part1: null,
    part2: null,
    part3: null,
    part4: null
  });

  const instructionsToolbarRef = useRef(null);
  const API = process.env.REACT_APP_API_URL;

  const handlePartTypeChange = (part, newType) => {
    setPartTypes(prev => ({
      ...prev,
      [part]: newType
    }));
    setQuestions(prev => ({
      ...prev,
      [part]: Array(10).fill().map(() => createDefaultQuestion(newType))
    }));
  };

  const handleQuestionChange = (part, index, updatedQuestion) => {
    setQuestions(prev => ({
      ...prev,
      [part]: prev[part].map((q, i) => i === index ? updatedQuestion : q)
    }));
  };

  const handlePartInstructionChange = (part, newContent) => {
    setPartInstructions(prev => ({
      ...prev,
      [part]: newContent
    }));
  };

  const createDefaultQuestion = (type) => {
    switch(type) {
      case 'fill':
        return {
          questionType: 'fill',
          questionText: '',
          correctAnswer: ''
        };
      case 'radio':
        return {
          questionType: 'radio',
          questionText: '',
          options: ['', '', ''],
          correctAnswer: ''
        };
      case 'checkbox':
        return {
          questionType: 'checkbox',
          questionText: '',
          options: ['', '', '', '', ''],
          correctAnswer: ''
        };
      default:
        return {
          questionType: type,
          questionText: '',
          options: ['', '', ''],
          correctAnswer: ''
        };
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!audioFile && !Object.values(partAudioFiles).some(file => file)) {
      setMessage('❌ Vui lòng tải lên ít nhất một file audio cho bài thi.');
      return;
    }

    if (!instructions.trim()) {
      setMessage('❌ Vui lòng nhập hướng dẫn làm bài.');
      return;
    }

    const formData = new FormData();
    if (audioFile) {
      formData.append('audioFile', audioFile);
    }

    Object.entries(partAudioFiles).forEach(([part, file]) => {
      if (file) {
        formData.append(`audioFile_${part}`, file);
      }
    });
    
    formData.append('instructions', instructions);
    formData.append('questions', JSON.stringify(questions));
    formData.append('partInstructions', JSON.stringify(partInstructions));
    formData.append('classCode', classCode);
    formData.append('teacherName', teacherName);

    try {
      const res = await fetch(`${API}/api/listening-tests`, {
        method: 'POST',
        body: formData
      });

      const data = await res.json();
      setMessage(data.message || '✅ Đã tạo đề thành công!');

      if (res.ok) {
        setTimeout(() => window.location.reload(), 2000);
      }
    } catch (err) {
      console.error('Error:', err);
      setMessage('❌ Lỗi khi tạo đề thi');
    }
  };

  const inputStyle = {
    width: '100%',
    padding: '10px',
    marginBottom: '10px',
    fontSize: '16px',
    borderRadius: '6px',
    border: '1px solid #ccc'
  };

  const tabStyle = (isActive) => ({
    padding: '10px 20px',
    backgroundColor: isActive ? '#0e276f' : '#e0e0e0',
    color: isActive ? 'white' : '#333',
    border: 'none',
    borderRadius: '8px 8px 0 0',
    cursor: 'pointer',
    marginRight: '5px'
  });

  return (
    <>
      <AdminNavbar />
      <div style={{ maxWidth: '1000px', margin: '20px auto', padding: '0 20px' }}>
        <h2>🎧 Thêm đề Listening</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Mã lớp (VD: 317S3)"
            value={classCode}
            onChange={e => setClassCode(e.target.value)}
            style={inputStyle}
          />
          <input
            type="text"
            placeholder="Tên giáo viên ra đề"
            value={teacherName}
            onChange={e => setTeacherName(e.target.value)}
            style={inputStyle}
          />

          <div style={{ marginBottom: '20px' }}>
            <div>
              <label><b>📂 File audio chung:</b></label><br />
              <input
                type="file"
                accept="audio/*"
                onChange={e => setAudioFile(e.target.files[0])}
                style={{ margin: '10px 0' }}
              />
              {audioFile && (
                <audio controls style={{ width: '100%', marginTop: '10px' }}>
                  <source src={URL.createObjectURL(audioFile)} />
                  Your browser does not support the audio element.
                </audio>
              )}
            </div>
          </div>

          <div style={{ marginBottom: '20px' }}>
            <div style={{ display: 'flex', marginBottom: '10px' }}>
              <button
                type="button"
                style={tabStyle(activeSection === 'instructions')}
                onClick={() => setActiveSection('instructions')}
              >
                📝 Hướng dẫn làm bài
              </button>
              <button
                type="button"
                style={tabStyle(activeSection === 'questions')}
                onClick={() => setActiveSection('questions')}
              >
                ❓ Danh sách câu hỏi
              </button>
            </div>

            {activeSection === 'instructions' ? (
              <div style={{ border: '1px solid #ddd', borderRadius: '4px', padding: '10px' }}>
                <div ref={instructionsToolbarRef}></div>
                <CKEditor
                  editor={DecoupledEditor}
                  data={instructions}
                  onReady={editor => {
                    try {
                      if (instructionsToolbarRef.current && !instructionsToolbarRef.current.children.length) {
                        instructionsToolbarRef.current.appendChild(editor.ui.view.toolbar.element);
                      }
                    } catch (err) {
                      console.error('Error mounting toolbar:', err);
                    }
                  }}
                  onChange={(event, editor) => setInstructions(editor.getData())}
                />
              </div>
            ) : (
              <div style={{ border: '1px solid #ddd', borderRadius: '4px', padding: '20px' }}>
                {[1, 2, 3, 4].map(partNumber => (
                  <ListeningPart
                    key={partNumber}
                    partNumber={partNumber}
                    partType={partTypes[`part${partNumber}`]}
                    questions={questions[`part${partNumber}`]}
                    instruction={partInstructions[`part${partNumber}`]}
                    onTypeChange={(newType) => handlePartTypeChange(`part${partNumber}`, newType)}
                    onInstructionChange={(content) => handlePartInstructionChange(`part${partNumber}`, content)}
                    onQuestionChange={(index, updatedQuestion) => 
                      handleQuestionChange(`part${partNumber}`, index, updatedQuestion)}
                  />
                ))}
              </div>
            )}
          </div>

          <div style={{ display: 'flex', gap: '10px' }}>
            <button
              type="submit"
              style={{
                padding: '10px 20px',
                fontSize: '16px',
                backgroundColor: '#e03',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer'
              }}
            >
              ➕ Tạo đề
            </button>

            <button
              type="button"
              onClick={() => setShowPreview(true)}
              style={{
                padding: '10px 20px',
                fontSize: '16px',
                backgroundColor: '#0e276f',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer'
              }}
            >
              👁 Preview
            </button>
          </div>
        </form>

        {message && (
          <p style={{
            marginTop: 10,
            fontWeight: 'bold',
            color: message.includes('❌') ? 'red' : 'green'
          }}>
            {message}
          </p>
        )}

        {showPreview && (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            backgroundColor: 'rgba(0,0,0,0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 9999
          }}>
            <div style={{
              background: 'white',
              padding: '30px',
              borderRadius: '12px',
              width: '90%',
              maxHeight: '90vh',
              overflowY: 'auto'
            }}>
              <h3>Preview</h3>
              <div dangerouslySetInnerHTML={{ __html: instructions }} />
              {[1, 2, 3, 4].map(partNumber => (
                <div key={partNumber}>
                  <h4>Part {partNumber}</h4>
                  <div dangerouslySetInnerHTML={{ 
                    __html: partInstructions[`part${partNumber}`] 
                  }} />
                  <PreviewSection
                    part={partNumber}
                    questions={questions[`part${partNumber}`]}
                    startFromNumber={1 + (partNumber - 1) * 10}
                    type={partTypes[`part${partNumber}`]}
                    audioFiles={partAudioFiles[`part${partNumber}`] || audioFile}
                  />
                </div>
              ))}
              <div style={{ textAlign: 'right', marginTop: '20px' }}>
                <button
                  onClick={() => setShowPreview(false)}
                  style={{
                    padding: '8px 16px',
                    backgroundColor: '#e03',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}
                >
                  Đóng
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default CreateListeningTest;
